const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys');
//keep an instance of user, pull out an model class
// this is a model instance and we wanna store into the database
const User = mongoose.model('users');

//generate a unique piece of information of each user
passport.serializeUser((user, done) => {
	// use user.id, 
	//which auto-generated by mongoDB for each record, 
	//instead of google if cause we may have facebook id etc.
	done(null, user.id);
});

passport.deserializeUser((id, done) => {
	User.findById(id)
		.then(user => {
			done(null, user);
		});
});

//tell passport we use this new google strategy instance
passport.use(
	new GoogleStrategy(
		{
			clientID: keys.googleClientID,
			clientSecret: keys.googleClientSecret,
			callbackURL: '/auth/google/callback',
			// tell google to trust heroku as out proxy,
			// then use https rather than http
			proxy : true
		}, 
		async (accessToken, refreshToken, profile, done) => {
			// now callback arrow function return the authentification code
			// here would be great if you'd like to store this into databse
			const existingUser = await User.findOne({ googleId: profile.id});
			if(existingUser){
				// we already have a record with the given profile id
				//null means all works fine 
				// and here is the user
				return done(null, existingUser);
			}
			//create a new user by id and save it to the database
			const newUser = await new User({googleId: profile.id}).save();
			return done(null, newUser);
		}
	)
);